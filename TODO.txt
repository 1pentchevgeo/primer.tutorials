TO-DO Items for Tutorials

write_csv, write_rds and read_rds in wrangling


To Discuss:


Visualization tutorials need to be much longer. Or does it? Might be close to 8 hours as is, at least if you read the chapter.

When I have a link in a tutorial, and the student clicks on it, there seems to be no way to get back to the tutorial. There is no "Go Back" button. How can we fix this? Ask on RStudio Community.

https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/


* Get our tests to catch when an exercise has zero lines. That causes a subtle error.

* Add stan_glm example to tutorial 6.

* Should we have the default download be a PDF file? Big benefit (?) is that it is easier for students to see what they have done all at once. Also easier (?) for TFs to grade quickly. But also easier to cheat? Also, harder to automate the processing of them.

* Can we show "answers" to a Tutorial after students have submitted it? How? Maybe all we need is a script which pulls out the code for all the major examples and puts it in a single RMD which we could knit and distribute? If we had a standard scheme for naming the R code chunks in which these are created, pulling them out would be easy. Indeed, creating this file could be part of the test process!

What is up with this note?

* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘grid’ ‘png’ ‘primer.data’ ‘readxl’ ‘rstanarm’ ‘tidyverse’
  All declared Imports should be used.


Use this framework: https://github.com/noamross/gams-in-r-course

Plots in visualization-D with vertical lines for 2* mad .

Get .Rbuildignore to ignore any non-Rmd file in inst/tutorials. Otherwise, the tutorial folder gets too big with all the junk files.

Automate a test of the Submit button. Want to actually download the rds and check that it is "correct."


* Add this to instructions:

In many settings, it is natural for a tools question to have three parts. First, run a line of code that reports on the value of something. Example:

rstudioapi::readRStudioPreference(name = "load_workspace", default = "Code failed.")

This will return the defaul value. (I am not what that is.)

Second, change the setting. This generally won't return anything.

rstudioapi::writeRStudioPreference(name = "load_workspace", value = FALSE)

See how the first was "read" and the second was "write"? Then, the third and final step is to confirm that the change worked by re-running the first code again.

rstudioapi::readRStudioPreference(name = "load_workspace", default = "Code failed.")

And finish with a sentence that tells the student to notice that the value has changed and that it is now correct. (Of course, we "monitor" that by making them copy/paste this last command and its return from the Console into the tutorial.)


* What to do with PDF and tinytex? This all seemed to work very easily. Maybe just install and then issue packageVersion("tinytex")?

* mention iter = 10000

* Revisit making tables nice.


________________________________

To Explore:


* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we do web-scraping in a tutorial?

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?

* There is a lot of redundent text in tutorials: Write your name, submit, et cetera. Any way to avoid copying/pasting that each time? Maybe we need a "make tutorial" script which would take a raw tutorial and then add that material to it. Perhaps a template? But then we can't (?) go back and make a change in our other 20 tutorials.

* Have our testing process check that all hints have eval = FALSE.

* How test for exercise chunks with no lines, which causes a weird error?

* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?


* https://github.com/karthik/holepunch is interesting.


From students:

"I found the tutorials for both chapters to be very helpful. I actually ended up doing some of the unassigned intro tutorials on my own and think it would be helpful to assign ones like "set- up" and "data basics" for the shopping week."

"Would be helpful to have more examples along the way so we can see what the expected result is and check our work beyond the final plot. If you
look at a hint, and view the next hint, you can't go back to see the first hint."


