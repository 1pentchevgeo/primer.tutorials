# Planning for Tutorials


### Priorities

Update the README page along these lines: https://education.rstudio.com/blog/2020/09/delivering-learnr-tutorials-in-a-package/

  * Instructions for removing and reinstalling.
  
  * Instructions for running from the Tutorial pane (may need to refresh or even restart R). Or running `learnr::run_tutorial("lesson1", "tutorialpackage")`. 

#### Heather

hi! I think I've figured out how to send a pull request

#### Nuo Wen Lei

Work with Ajay on error.

Fix bugs reported on discord.

Clean up Data Webscraping so it is ready to go for students.

Make your code consistent with the Style Guide.



#### Nosa

Work on data-API tutorial.

Do another GET example.

For almost every example, make them type: help(package = "WDI"). Sometimes ??WDI. ?WDISearch


#### Becca

* Give Data-A an hours' worth of questions. Maybe even 90 minutes.

* Add json reading examples.

* Add 10 questions which hit the highlights of parse_*, mainly parse_number and parse_date. This is a new, stand-alone section. Could have 15 questions.

* Next stand alone section is for "Messy test files." And then, add a three CSV files, each with four annoying columns, meaning columns that by default parse incorrectly. The usual trick is to force R to read in these columns as character and then parse.

* Read Chapter 3. Make any changes you like. Read Data Import chapter in R4DS. Think about where/how we teach that stuff.

* Fix two items with your initials in instructions.Rmd.




### Tutorials to add

* Need a tutorial which teaches about R Markdown and R Projects. Or maybe just links to an on-line tutorial which does that? Could students paste in screen shots as answers? How about if they did `head` on the files they make and copy/pasted the results?

* Expand the Git and Github tutorial. Need to keep this connected to the relevant section in Tools. How much material might we add?

* An Rpubs tutorial?

* A "census" tutorial which covers all the relevant material in the maps tutorial, but no mapping. Note that the new (dev) version of tidycensus makes it much easier to get millions of rows of ACS data.

* A "map" tutorial which starts by assuming the existence of the needed map data and then does the same map plots as in the appendix.

* A "distill" tutorial. First, we need to decide on a standard distill set up (and path to its creation). Take material from the links in the Bootcamp schedule.




### To discuss

* Specify which versions of learnr (and other Github packages?) we want. Otherwise, you always get the head, which may not be desirable.

* Best single summary of tutorial tools/approaches: https://damien-datasci-blog.netlify.app/post/how-to-make-an-interactive-tutorial-to-teach-r-an-overview/

* Stop adding files like test_1.csv to inst/www and then using file.copy(). Instead, just reference the url directly.

* Is there some way to ensure that all the answers we have for each question --- including complete answers we provide in hints --- work correctly. For example, if a input csv file becomes corrupted, how will we catch that?

* Is there a way to confirm that all the files we need --- because we file_copy() them --- actually exist?

* Change behavior of file.copy() so that it produces a warning if the file is not there.

* Move stuff about relative paths into the terminal tutorial, or at least ensure that the Terminal tutorial covers those topics.

* Add ggdist::stat_slab to chapter 1 and Visualization tutorials. Think of it as one more geom_, which just doesn't live in ggplot2 nor does it start with geom_. Or is that too confusing? Maybe teaching in in chapter 2 tutorials is soon enough.

* .Rbuildignore should be cleaned up. See discussion in instructions.Rmd.

* "Submit" section is poorly named since we don't really submit anything. Ought to be named "Download answers" or something like that.

* In instructions.Rmd, we currently claim:

````
Always place a ### on the line below of your Group Title (##). This is a bug but is needed to function properly.
````

Is that still true? Maybe we don't really need ### below each section header? That might have been a mistake, originally; or perhaps recent learnr versions have fixed it. Either way, we ought to standardize on always having it or not. This is especially true in Information and Submission sections. Fixing those means fixing the comparison files we use for testing, of course.

* How do we test just one tutorial.Rmd. Using "Run Document"", although it willl catch some problems, does not catch everything. Using "Check" works, but it takes forever because we have too many tutorials. There must be something we can do from the Console. But this might be tricky! Don't forget the (important?) distinction between raw .Rmd files and installed tutorials.

* Expand the Getting Started tutorial and make it better connected to the Primer chapter. Students read the chapter and then do the tutorial. The tutorial ought to confirm that they have done everything that the chapter told them to do. Even though it is done in class, it could be a bit longer, so 10 or 15 questions.

* Do we really still need to be using the development version of learnr? That makes me nervous! And why haven't they updated the version on CRAN for more than 15 months?

* Document the fact that, although we don't have "solutions"" for tutorials, we can use, for example, knitr::purl("inst/tutorials/000-getting-started/tutorial.Rmd") to make a tutorial.R file which includes all the R code used for the answers. Maybe that trick is enough, even though it is hard to use since the questions themselves are not provided? 95%+ of students won't care.

* Process all rds tutorial answer files and organize the results.
* When I have a link in a tutorial, and the student clicks on it, there seems to be no way to get back to the tutorial. There is no "Go Back" button. How can we fix this? Ask on RStudio Community.


* What is up with this note?

````
* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘grid’ ‘png’ ‘primer.data’ ‘readxl’ ‘rstanarm’ ‘tidyverse’
  All declared Imports should be used.
````

* Plots in visualization-D with vertical lines for 2* mad .


* What to do with PDF and tinytex? This all seemed to work very easily. Maybe just install and then issue packageVersion("tinytex")?

* mention iter = 10000

* Revisit making tables nice.


## Items to add to our testing process

* If you don't have an r at the start of the r code chunk options, the entire tutorial breaks and, at least sometimes, it breaks by creating the tutorial but with only questions and with three columns. Could we have a test that checks for this? Test that each code chunk options in a tutorial begins with r followed by a space.

* Can we use knitr::purl() to create .R files which might then become part of our testing process?

* We want the test to fail if there is a package like broom.mixed which is used in a tutorial but which is not in the DESCRIPTION file. **renv** might have a way to get a list of all the words which appear in any library() call within the package . . .

* Have our testing process check that all hints have eval = FALSE.

* Test for exercise chunks with no lines. This causes a weird error which is very hard to diagnose.

* Automate a test of the Submit button. Want to actually download the rds and check that it is "correct."

* Should we have the default download be a PDF file? Big benefit (?) is that it is easier for students to see what they have done all at once. Also easier (?) for TFs to grade quickly. But also easier to cheat? Also, harder to automate the processing of them. Best would be to add an option so that students can choose either rds or PDF.

### To explore later

* Consider this framework: https://github.com/noamross/gams-in-r-course

* Should our tutorials look more like this one?

https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/

* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?

* There is a lot of redundent text in tutorials: Write your name, submit, et cetera. Any way to avoid copying/pasting that each time? Maybe we need a "make tutorial" script which would take a raw tutorial and then add that material to it. Perhaps a template? But then we can't (?) go back and make a change in our other 20 tutorials. Maybe we need a script which finds the current version of these standard sections, deletes them, and then replaces them with the official version? Or maybe just using Find in Files and then global replace is enough . . .


* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?

* https://github.com/karthik/holepunch is interesting. But it also hasn't been updated in more than 7 months.


