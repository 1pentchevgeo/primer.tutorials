# Planning for Tutorials


### Priorities

Update the README page along these lines: https://education.rstudio.com/blog/2020/09/delivering-learnr-tutorials-in-a-package/

  * Instructions for removing and reinstalling.

  * Instructions for running from the Tutorial pane (may need to refresh or even restart R). Or running `learnr::run_tutorial("lesson1", "tutorialpackage")`.


#### Nuo Wen Lei

Add addin in pull request.

Add explanation of no hints for written answers to instructions.Rmd. Add link to RStudio Community discussion.

Explore making life easier for tutorial writers. There should be an Add-In in RStudio which makes life easier: http://rstudio.github.io/rstudioaddins/. Would be great to have an Add-In so that an author can type 

Fix bugs reported on Discord about Webscraping. (Check with Nosa and Becca about whether or not they already fixed theirs. And, if not, fix them.)

Add explanation of no hints for written answers to instructions.Rmd. Add link to RStudio Community discussion.

Add new section to instructions.Rmd about copy button for previous code chunk. First, what code do we need at the top. Second, detailed explanation of what that code is doing and why. Try to simplify the code as much as possible, using only very standard approaches. Add to instructions.Rmd a section at the end about any thoughts/advice/ideas about this topic. What might we explore later? DONE.

Explore making life easier for tutorial writers. There should be an Add-In in RStudio which makes life easier: http://rstudio.github.io/rstudioaddins/. Would be great to have an Add-In so that an author can use a shortcut to create exercises faster. CREATED PROTOTYPE.


`### Exercise 7`

and then hit a button, causing the create of the exercise code chunk with the exercise = TRUE and a code chunk name like section-title-ex-7. Also, the copy-code button below it. And then followed by an empty hint with eval = FALSE.

Or maybe get title from label of section? Like: ## Michigan Voter Experiment {#michigan}

Rewrite Wrangling C to do things the right way! Or at least the first section so that we can test it out.

#### Nosa

* Ask on RStudio Community about hints for written questions.

* Add geom_col, as discussed, to Visualization C.

* Add example which deals with summafrize/mutate/whatever/you know what I mean. Add it in Visualization C.

* Simple 7 question section in Visualization C which contrasts geom_col and geom_bar. Example:

> trains %>% ggplot(aes(x = treatment)) + geom_bar()
> trains %>% ggplot(aes(x = treatment)) + geom_col()
Error: geom_col requires the following missing aesthetics: y
Run `rlang::last_error()` to see where the error occurred.
> trains %>% group_by(treatment) %>% summarize(total = n()) %>% ggplot(aes(x = treatment, y = total)) + geom_col()

* Add the pipe (|) command to the Terminal tutorial.

* In instructions.Rmd, we currently claim:

````
Always place a ### on the line below of your Group Title (##). This is a bug but is needed to function properly.
````

Is that still true? Maybe we don't really need ### below each section header? That might have been a mistake, originally; or perhaps recent learnr versions have fixed it. Either way, we ought to standardize on always having it or not. This is especially true in Information and Submission sections. Fixing those means fixing the comparison files we use for testing, of course.

* Add a section (where? maybe basic tidyverse) about when to pipe. When to assign to an object and then use that object later. When do just have the pipe "spit stuff out." Show that you can assign the object at the start of the pipe (which is the standard way) or at the end of the pipe, whcih shows how you are capturing whatever would have been spat out.

* Fixes to Distill tutorial.

* Fixes to Terminal tutorial which teach stuff that Distill tutorial depends on, like grep -F.

#### Becca

* Fix two items with your initials in instructions.Rmd.

* Edit Github tutorial to add Github, RStudio, R Markdown, R Scripts. Do the questions in the order in which I start each class. See (and copy!) how Nosa does it.





### Tutorials to add

* Expand Git/Github tutorial. Need to teach about R Markdown and R Projects. Or maybe just links to an on-line tutorial which does that? Could students paste in screen shots as answers? How about if they did `head` on the files they make and copy/pasted the results?

* A making tables tutorial, focussing on gt.

* An Rpubs tutorial? Talk about rsconnect. Need to add rsconnect to .gitgnore.

* A "census" tutorial which covers all the relevant material in the maps tutorial, but no mapping. Note that the new (dev) version of tidycensus makes it much easier to get millions of rows of ACS data.

* A "map" tutorial which starts by assuming the existence of the needed map data and then does the same map plots as in the appendix.

* An rtweet tutorial: https://github.com/ropensci/rtweet


### To discuss


* Specify which versions of learnr (and other Github packages?) we want. Otherwise, you always get the head, which may not be desirable. Do we really still need to be using the development version of learnr? That makes me nervous! And why haven't they updated the version on CRAN for more than 15 months?

* Best single summary of tutorial tools/approaches: https://damien-datasci-blog.netlify.app/post/how-to-make-an-interactive-tutorial-to-teach-r-an-overview/

* Is there some way to ensure that all the answers we have for each question --- including complete answers we provide in hints --- work correctly. For example, if a input csv file becomes corrupted, how will we catch that?

* Is there a way to confirm that all the files we need --- because we file_copy() them --- actually exist?

* Should we set up our own site for maintaining binaries? https://ropensci.org/blog/2021/06/22/setup-runiverse/ How much does this help with installation issues?

* Another way to host the tutorials: https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server/

* Change behavior of file.copy() so that it produces a warning if the file is not there.

* .Rbuildignore should be cleaned up. See discussion in instructions.Rmd.

* "Submit" section is poorly named since we don't really submit anything. Ought to be named "Download answers" or something like that. Make it easier for students to download their answers.


* How do we test just one tutorial.Rmd. Using "Run Document"", although it willl catch some problems, does not catch everything. Using "Check" works, but it takes forever because we have too many tutorials. There must be something we can do from the Console. But this might be tricky! Don't forget the (important?) distinction between raw .Rmd files and installed tutorials.

* Expand the Getting Started tutorial and make it better connected to the Primer chapter. Students read the chapter and then do the tutorial. The tutorial ought to confirm that they have done everything that the chapter told them to do. Even though it is done in class, it could be a bit longer, so 10 or 15 questions.


* Document the fact that, although we don't have "solutions"" for tutorials, we can use, for example, knitr::purl("inst/tutorials/000-getting-started/tutorial.Rmd") to make a tutorial.R file which includes all the R code used for the answers. Maybe that trick is enough, even though it is hard to use since the questions themselves are not provided? 95%+ of students won't care.

* Process all rds tutorial answer files and organize the results.

* When I have a link in a tutorial, and the student clicks on it, there seems to be no way to get back to the tutorial. There is no "Go Back" button. How can we fix this? Ask on RStudio Community.


* What is up with this note?

````
* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘grid’ ‘png’ ‘primer.data’ ‘readxl’ ‘rstanarm’ ‘tidyverse’
  All declared Imports should be used.
````

* Plots in visualization-D with vertical lines for 2* mad .


* What to do with PDF and tinytex? This all seemed to work very easily. Maybe just install and then issue packageVersion("tinytex")?

* mention iter = 10000

* Revisit making tables nice.


## Items to add to our testing process

* If you don't have an r at the start of the r code chunk options, the entire tutorial breaks and, at least sometimes, it breaks by creating the tutorial but with only questions and with three columns. Could we have a test that checks for this? Test that each code chunk options in a tutorial begins with r followed by a space.

* Can we use knitr::purl() to create .R files which might then become part of our testing process?

* We want the test to fail if there is a package like broom.mixed which is used in a tutorial but which is not in the DESCRIPTION file. **renv** might have a way to get a list of all the words which appear in any library() call within the package . . .

* Have our testing process check that all hints have eval = FALSE.

* Test for exercise chunks with no lines. This causes a weird error which is very hard to diagnose.

* Automate a test of the Submit button. Want to actually download the rds and check that it is "correct."

* Should we have the default download be a PDF file? Big benefit (?) is that it is easier for students to see what they have done all at once. Also easier (?) for TFs to grade quickly. But also easier to cheat? Also, harder to automate the processing of them. Best would be to add an option so that students can choose either rds or PDF.

### To explore later

* Consider this framework: https://github.com/noamross/gams-in-r-course

* Should our tutorials look more like this one?

https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/

* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?

* There is a lot of redundent text in tutorials: Write your name, submit, et cetera. Any way to avoid copying/pasting that each time? Maybe we need a "make tutorial" script which would take a raw tutorial and then add that material to it. Perhaps a template? But then we can't (?) go back and make a change in our other 20 tutorials. Maybe we need a script which finds the current version of these standard sections, deletes them, and then replaces them with the official version? Or maybe just using Find in Files and then global replace is enough . . .


* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?

* https://github.com/karthik/holepunch is interesting. But it also hasn't been updated in more than 7 months.


