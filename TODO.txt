# Planning for Tutorials

When should we do which tutorials? Ideally, we do RStudio in week 1, Terminal in week 2 and distill in week 3. But then we need (?) to not use terminal trickery on Git tutorial. Maybe that is an easy fix.

### Priorities

#### Nuo Wen Lei

Is there a way to not have to add that hackery to every tutorial.Rmd? Equivalent to #include in C. Good question for R Studio Community. Perhaps related: https://github.com/jeroen/js.

Another question for RStudio community: I have a tibble with two character columns. I want to print this out as a PDF. One of the columns can be very long. (It is a paragraph of prose sometimes.) I would like that text to be wrapped in the PDF so it looks nice. Give a concrete example. Show what you currently do.

Create an Add In which, for the current Rmd, changes all the code chunk names, to be what they ought to be: short lower case with dashes version of the Section Title plus a dash plus ex-3, or whatever. For example (from Wrangling B), if the Section Title is "Kenya Voting", then the code chunk name for the `exercise = TRUE` code chunk under Exercise 1 is "kenya-voting-ex-1". Given that, the code chunk name for the (single) hint must be "kenya-voting-ex-1-hint-1". (We always number all hints.)

FIRST PASS: DO THIS AS SIMPLY AS POSSIBLY. Start by ignoring any code chunk which is not clearly part of an Exercise.

Tricky parts:

  * What about long Section Titles? Just use the whole Section Title or the first 20 characters, whichever is shorter.

  * Sections titled "Download answers" and "Information" should be ignored. Or handles them correctly.

  * Make sure the hints are correct. If there is one hint, no suffix number is needed but let's just add a "-1" at the end to make things easier. If there is more than one hint, you must have hint-1, hint-2 and so on.

This add in does not fix all code chunk names. It just fixes all code chunk names within Exercises.

In submission_functions.R, change things so that both an encoded rds is created (as now) and an unencoded PDF (which can look ugly). Assuming this is easy, by default, a download click from a student gets both. Or maybe check one box or the other or both. Or something. Whatever is easiest for us.

Show only our own tutorials in the Tutorial pane? Or at least show ours at the top? The more tutorials we create, the more we need to make it easier for students to find them.
DO NOT DO THIS. Add Javascript magic to test-components.R to make sure that we confirm that all tutorials have the necessary magic. (Also, then need to add the magic to all the current tutorials.)

Mystery of permanent objects.

Maybe create an addin to create the skelton for written answers also? Maybe give both addins short cut keys?

Link one vignette to another? Just [this](instructions.html).

Make sure the `eval = FALSE` is set in the code chunk for all hints. Also check that all exercise = TRUE code chunks have at least one blank row.



#### Nosa

* Add some thoughs to discussions.txt about your new discoveries. Done

* Switch test-components to using new approach from test_render. Done

* Should we set up our own site for maintaining binaries? https://ropensci.org/blog/2021/06/22/setup-runiverse/ How much does this help with installation issues?

* .Rbuildignore should be cleaned up. See discussion at bottom of this file.

* I hate the library(png) and library(grid) nonsense which is required to show images in tutorials. Surely there is a better way! [make individual images directories for each tutorial, use knitr::include_graphics()]

* Figure out Github Actions to knit the Rmd for any PR for primer. See primer.tutorials and primer.data for examples. Only want to knit that chapter, not the whole book.

* Move to dev and prod workflow for the primer?

### Yuhan

Take ownership of Probability A.  Make it follow the guidance in the Written Instructions.

Start Probability B. Basic structure is the same. Show a plot. And then go through the 15 steps for making the plot, but teach stuff along the way. Note that these examples will not be from the chapter.

### Tutorials to add

* Expand Rstudio and Friends tutorial.

* A making tables tutorial, focussing on gt. This will be assigned for week 4. Might have its first section use knitr::kable().


* Expand the Getting Started tutorial and make it better connected to the Primer chapter. Students read the chapter and then do the tutorial. The tutorial ought to confirm that they have done everything that the chapter told them to do. Even though it is done in class, it could be a bit longer, so 10 or 15 questions.

* A "census" tutorial which covers all the relevant material in the maps tutorial, but no mapping. Note that the new (dev) version of tidycensus makes it much easier to get millions of rows of ACS data.

* A "map" tutorial which starts by assuming the existence of the needed map data and then does the same map plots as in the appendix.

* An rtweet tutorial: https://github.com/ropensci/rtweet

* A permutation tests tutorial.


### To discuss

* Another example set: https://openintrostat.github.io/ims-tutorials/

* Is there a way to add a test which confirms that none of the code chunk names are duplicated? Is that useful/ncessary?

* Specify which versions of learnr (and other Github packages?) we want. Otherwise, you always get the head, which may not be desirable. Do we really still need to be using the development version of learnr? That makes me nervous! And why haven't they updated the version on CRAN for more than 15 months?

* Best single summary of tutorial tools/approaches: https://damien-datasci-blog.netlify.app/post/how-to-make-an-interactive-tutorial-to-teach-r-an-overview/

* Is there some way to ensure that all the answers we have for each question --- including complete answers we provide in hints --- work correctly. For example, if a input csv file becomes corrupted, how will we catch that?

* Is there a way to confirm that all the files we need --- because we file.copy() them --- actually exist? Can we change behavior of file.copy() so that it produces a warning if the file is not there.



* Another way to host the tutorials: https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server/






* How do we test just one tutorial.Rmd. Using "Run Document"", although it willl catch some problems, does not catch everything. Using "Check" works, but it takes forever because we have too many tutorials. There must be something we can do from the Console. But this might be tricky! Don't forget the (important?) distinction between raw .Rmd files and installed tutorials.




* Document the fact that, although we don't have "solutions"" for tutorials, we can use, for example, knitr::purl("inst/tutorials/000-getting-started/tutorial.Rmd") to make a tutorial.R file which includes all the R code used for the answers. Maybe that trick is enough, even though it is hard to use since the questions themselves are not provided? 95%+ of students won't care.

* Process all rds tutorial answer files and organize the results.

* When I have a link in a tutorial, and the student clicks on it, there seems to be no way to get back to the tutorial. There is no "Go Back" button. How can we fix this? Ask on RStudio Community.


* What is up with this note?

````
* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘grid’ ‘png’ ‘primer.data’ ‘readxl’ ‘rstanarm’ ‘tidyverse’
  All declared Imports should be used.
````

* Plots in visualization-D with vertical lines for 2* mad .


* What to do with PDF and tinytex? This all seemed to work very easily. Maybe just install and then issue packageVersion("tinytex")?

* mention iter = 10000

* Revisit making tables nice.


## Items to add to our testing process

* If you don't have an r at the start of the r code chunk options, the entire tutorial breaks and, at least sometimes, it breaks by creating the tutorial but with only questions and with three columns. Could we have a test that checks for this? Test that each code chunk options in a tutorial begins with r followed by a space.

* Can we use knitr::purl() to create .R files which might then become part of our testing process?

* We want the test to fail if there is a package like broom.mixed which is used in a tutorial but which is not in the DESCRIPTION file. **renv** might have a way to get a list of all the words which appear in any library() call within the package . . .

* Have our testing process check that all hints have eval = FALSE.

* Test for exercise chunks with no lines. This causes a weird error which is very hard to diagnose.

* Automate a test of the Submit button. Want to actually download the rds and check that it is "correct."

* Should we have the default download be a PDF file? Big benefit (?) is that it is easier for students to see what they have done all at once. Also easier (?) for TFs to grade quickly. But also easier to cheat? Also, harder to automate the processing of them. Best would be to add an option so that students can choose either rds or PDF.

### To explore later

* Consider this framework: https://github.com/noamross/gams-in-r-course

* Should our tutorials look more like this one?

https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/

* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?

* There is a lot of redundent text in tutorials: Write your name, submit, et cetera. Any way to avoid copying/pasting that each time? Maybe we need a "make tutorial" script which would take a raw tutorial and then add that material to it. Perhaps a template? But then we can't (?) go back and make a change in our other 20 tutorials. Maybe we need a script which finds the current version of these standard sections, deletes them, and then replaces them with the official version? Or maybe just using Find in Files and then global replace is enough . . .


* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?

* https://github.com/karthik/holepunch is interesting. But it also hasn't been updated in more than 7 months.

## .Rbuildignore

.Rbuildignore gives me a bunch of problems. I think that the core issue is that `#` as comment character does not work. But it also does not always break nicely! For unknown reasons, adding some comments caused all the files in `inst/www` to not be  included in the build. Since `inst/www` was empty, the `www` folder was not included in the tarball. This, of course, caused all sorts of other failures. I think the key issue is that using `*` (or maybe a parenthesis) in a line which begins with `#` causes trouble.

Anyway, we would like to ensure that all the junk files which end up in the `tutorials/*` directories are not included in the build. Such files are often large. They also run the risk of messing things up in that they might cause certain tests to pass for us but which would fail for anyone who downloads from Github. (The .gitignore does a reasonable ensuring that such files do not end up on Github.)

The two tutorial* lines currently in .Rbuildignore do some good, I think. But what I really want to specify is that only files named tutorial.Rmd are allowed into the build. (Or maybe just those files plus some specified ones which are used to store rds objects used by the tutorials.) I don't know how to do this. [^(.*tutorial\/?!.*.Rmd$|images)$]

If you are using a new library, there are several things you need to check. First, most obviously, you should install the package within the primer.tutorials directory. Second, you must use library(X) in the setup chunk within the tutorial.Rmd itself. Third, you need to run renv::status(). This should report that there is a new package which is not part of renv.lock. You will need to run, renv::snapshot() so that renv.lock is updated. Fourth, you need to add the package to the DESCRIPTION file, in the Imports: section. (And don't forget the comma when you do so.) If you don't do this, then R CMD check might work on your computer, where library X is already installed, but won't work in the cloud since R relies on the DESCRIPTION file to know what packages to install.

### Allison Horst

The main question was: How do we incorporate tutorial questions directly into the chapter itself? Allison is the world expert on this topic.

* She is concerned about user loads for published Shiny apps - would recommend that we use the basic or higher plan.

* She thinks using Desiree's method of embedding one exercise at a time might get unreasonable for a book of our size, but suggested that we could host 12 different ShinyApps corresponding to each chapter, and then link to each chapter in one central location. (Kind of like the combined tutorials app Evelyn created via HMDC.)

* How did you decide which exercises were going to be "tutorials" and which would be "exercises"? She wanted the exercises to be incremental, so a lot of the code was already pre-populated. The exercises that were blank built directly off of code that was already shown before, so that students could have an "easy win" by just copying the previous code and tweaking a variable name. Allison thinks that this incremental process is important for beginner R students.

* How much memory does the ShinyApp consume? Do you know of any tricks to make learnr tutorials smaller? She recommends that we contact the team at RStudio Education - this is not her area of expertise. Allison says that the RStudio Education team is super eager to hear about learnr use cases, would be happy to talk to us, and would even ask us to write a blog post. She also mentioned that the team would know the most about cutting-edge learnr stuff, including things like a "completion rate" bar that shows students how far they are through a tutorial.

* Any tips for remote teaching or learning? Using learnr at all is a big step. Allison also pre-records short versions of her lectures for her students to stream at a later time,  and holds smaller discussion sections in class where they do activities.

* Allison's #1 Recommendation to remote teachers of R: Having students start out with RStudio Cloud and then transitioning to Desktop. You can set up workspaces so the necessary packages are already loaded and installed, any script is already pre-loaded, and all students need to do is log in. It looks exactly the same as RStudio Desktop except folks don't have to worry about installing R or RStudio. You can push/pull from git in RStudio Cloud as well (link to a Rstudio cloud tutorial/article: https://rstudio.com/resources/webinars/teaching-r-online-with-rstudio-cloud/)
