TO-DO Items for Tutorials

* do Data A like a student. Start to finish. Time it! Be honest. Fix things. Make notes about stuff to add.

* write_csv(), write_rds() and read_rds() in Data A. And some col_types stuff. Using other arguments. Like max and min stuff.

* Separate out Terminal (and PDF) from Tools, call it "terminal". Seperate out Git and Github from tools into "github". Include the usethis::blankslate(). 

* Data A does not work (I think) on Windows machines. I think that the key issue is that it does not display the images of what the file looks like.

* A "census" tutorial which covers all the relevant material in the maps tutorial, but no mapping. 

* A "map" tutorial which starts by assuming the existence of the needed map data and then does the same map plots as in the chapter.

* A tutorial which does the same webscraping as the Mine/Mine paper. Note that that paper is CC, so we can just copy/paste the relevant sections. Add this material first as a section in Chapter 3. Then write a tutorial which hits the highlights.

To Discuss:



Visualization tutorials need to be much longer. Or does it? Might be close to 8 hours as is, at least if you read the chapter.

When I have a link in a tutorial, and the student clicks on it, there seems to be no way to get back to the tutorial. There is no "Go Back" button. How can we fix this? Ask on RStudio Community.

* Should our tutorials look more like this one?

https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/


* Add stan_glm example to tutorial 6.

* Should we have the default download be a PDF file? Big benefit (?) is that it is easier for students to see what they have done all at once. Also easier (?) for TFs to grade quickly. But also easier to cheat? Also, harder to automate the processing of them.

* Can we show "answers" to a Tutorial after students have submitted it? How? Maybe all we need is a script which pulls out the code for all the major examples and puts it in a single RMD which we could knit and distribute? If we had a standard scheme for naming the R code chunks in which these are created, pulling them out would be easy. Indeed, creating this file could be part of the test process!

What is up with this note?

* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘grid’ ‘png’ ‘primer.data’ ‘readxl’ ‘rstanarm’ ‘tidyverse’
  All declared Imports should be used.


Use this framework: https://github.com/noamross/gams-in-r-course

Plots in visualization-D with vertical lines for 2* mad .

Get .Rbuildignore to ignore any non-Rmd file in inst/tutorials. Otherwise, the tutorial folder gets too big with all the junk files.


* What to do with PDF and tinytex? This all seemed to work very easily. Maybe just install and then issue packageVersion("tinytex")?

* mention iter = 10000

* Revisit making tables nice.


## Items to add to our testing process

* If you don't have an r at the start of the r code chunk options, the entire tutorial breaks and, at least sometimes, it breaks by creating the tutorial but with only questions and with three columns. Could we have a test that checks for this? Test that each code chunk options in a tutorial begins with r followed by a space.

* We want the test to fail if there is a package like broom.mixed which is used in a tutorial but which is not in the DESCRIPTION file. **renv** might have a way tp get a list of all the words which appear in any library() call within the package . . .

* Have our testing process check that all hints have eval = FALSE.

* Test for exercise chunks with no lines. This causes a weird error which is very hard to diagnose.

* Automate a test of the Submit button. Want to actually download the rds and check that it is "correct."



To Explore:


* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we do web-scraping in a tutorial?

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?

* There is a lot of redundent text in tutorials: Write your name, submit, et cetera. Any way to avoid copying/pasting that each time? Maybe we need a "make tutorial" script which would take a raw tutorial and then add that material to it. Perhaps a template? But then we can't (?) go back and make a change in our other 20 tutorials.



* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?


* https://github.com/karthik/holepunch is interesting.


From students:

"I found the tutorials for both chapters to be very helpful. I actually ended up doing some of the unassigned intro tutorials on my own and think it would be helpful to assign ones like "set- up" and "data basics" for the shopping week."

"Would be helpful to have more examples along the way so we can see what the expected result is and check our work beyond the final plot. If you
look at a hint, and view the next hint, you can't go back to see the first hint."


