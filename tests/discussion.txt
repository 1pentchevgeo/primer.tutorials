Testing tutorials is tricky.

There are several different places that the tutorial.Rmd files live on the computer. Most importantly, they live in the cloned repo, the location for the files that we are actually editing. These are the only ones we really want to test. But they also live installed in the renv/library within that directory. These files are ignored by Git but they still exist. Third, the files live in any installed version of the package in the main home library, outside of the renv. Fourth, during the check process, the files are copied from the repo into the tar ball which is to be checked. Fifth, the tar ball is trickier then it appears! Within the check directory which is created from the tar ball, the tutorial.Rmd files show up in two places. Example:

/Users/davidkane/Desktop/projects/primer.tutorials.Rcheck/primer.tutorials/tutorials/00-git-and-github/tutorial.Rmd
/Users/davidkane/Desktop/projects/primer.tutorials.Rcheck/00_pkg_src/primer.tutorials/inst/tutorials/00-git-and-github/tutorial.Rmd

Theoretically, none of this should matter! We only want to check the "true" files from the cloned repo. Just render those! The main problem with this is that there are two ways to test files in R. We can use Build -> Test Package. This does not build a new tar ball. Instead, it simply sources test/testthat.R. I am unsure exactly how this functions. I *think* that a new R instance is started, but one with a new .Rprofile, one which does not know about the renv library. Instead, it only knows about your default R library. In that case, the primer.tutorials which is loaded is the one which is there. But you have not updated it! In fact, within the project which uses renv, doing so is annoying. (In fact, I am not sure how to do it.) I *think* we should just rarely/never use Test Package.

The second way to test is Build -> Check Package. This does testing the "right way," by building the tar ball. From that tarball, I new primer.tutorials is installed, and that is the one that is used, which is what we want.  As long as we do it this way, then the `learnr:available_tutorials()` trick will work correctly, and then we build the path by hand.
  

# Other Notes

1) Perhaps a simple way to test the single Rmd which you are working on is with:

rmarkdown::render("inst/tutorials/02-terminal/tutorial.Rmd")


2) Note that R CMD check does not seem to catch cases in which you library() a package in a tutorial but that package is not in DESCRIPTION. But such a discrepancy will cause an error on Github Actions because, there, you only have access to packages that have been installed as part of that test.


3) How do we ensure that the primer.tutorials version that we are "using" is the correct one? primer.tutorials does not appear in the renv.lock file even when I "install" it in the project. Is that always true for a package in the renv.lock for that package? Is that a sign that I should not include it in the renv.lock? Is that a sign that it is a mistake to have functions in the package that the package uses? That seems a crazy conclusion! Maybe it is that, whenever R CMD check'ing a package, you always get the current version installed for its own use. So it makes no sense to include it in the renv.lock file. But, even if that is the case, it does not solve the Test Package problem. In that case, you are definitely not using the latest version. Maybe the lesson is to never use Test Package without first Install and Restart'ing things.




