Testing tutorials is tricky.

First, we would like to test files which are not yet installed. This is tricky because of the "inst" directory. That directory exists, obviously, in the normal project. But, in the tarball, it has vanished. test() works on the project as it is, with "inst". check() works on the tarball, in which there is no "inst". So, you need to a way to search for files which works in both places. Key trick:

files <- fs::dir_ls("../../",
                    recurse = TRUE,
                    regexp = "tutorial.Rmd") %>%
  fs::path_abs()

Second, any code in a tutorial code chunk, including in a hint, which produces an error when run on its own will cause an error if you use R CMD check. Most common example is when you have ... to indicate to the student that they should replace the ... with something. Best solution is to set eval = FALSE in all hint chunks like this. But the same warning applies for all chunks.

Testing is hard. There are (at least) two different environments in which we run tests. First, and most important, is when we run R CMD check. This is the most rigorous check. It requires that code written in all code chunks (including hints) work correctly. So, you can't just have things like library(...) around, even though that is an extremely convenient way to indicate to the student that they need to use the library function with some argument.

The second environment is when you press "Test Package". I think that all this does is to source tests/testthat.R. (And this environment is (mostly) the same as when you just execute tests interactively. At least, the two give the same answer.) But, in this second case, the code in hint (and all other?) chunks is not evaluated. The same problem arises if you just use "Run Document," as students will do (in effect) when the press Start Tutorial.

I think that, in order to simulate the test that is run with R CMD check, you need, from the R Console, to type:

rmarkdown::render("inst/tutorials/03-functions-A/tutorial.Rmd")

Note that R CMD check does not seem to catch cases in which you library() a package in a tutorial but that package is not in DESCRIPTION. But such a discrepancy will cause an error on Github Actions because, there, you only have access to packages that have been installed as part of that test.
