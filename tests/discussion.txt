Testing tutorials is tricky.

First, there are several different places that the tutorial.Rmd files live on the computer. Most importantly, they live in the cloned repo, the location for the files that we are actually editing. These are the only ones we really want to test. But they also lived installed in the renv/library within that directory. These files are ignored by Git but they still exist. Third, the files live in any installed version of the package in the main home library, outside of the renv. Fourth, during the check process, the files are copied from the repo into the tar ball which is to be checked.

Theoretically, none of this should matter! We only want to check the "true" files from the cloned repo. Just render those! The main problem with this is that there are two ways to test files in R. We can use Build -> Test Package. This does not build a new tar ball. Instead, it simply sources test/testthat.R. In this scenario, the "inst" directory still exists and must be accounted for. The second way to test is Build -> Check Package. This does testing the "right way," by building the tar ball. But the tar ball does not include the "inst" directory. This means the paths to find the tutorial.Rmd files differ in the two scenarios.   

Right now, the key trick we use to deal with this is:

files <- fs::dir_ls("../../",
                    recurse = TRUE,
                    regexp = "tutorial.Rmd") %>%
  fs::path_abs()

The "trick" here is that we assume (correctly?) that the test scripts (test-render.R and test-components.R) are run from the tests/testthat directory which is where they live. (I am honestly confused about how we can know this.) Two levels up from this location is the main primer.tutorials directory. From there, we look for all tutorial.Rmd files recursively. This will find them in both cases which we care about: if not tar-balled (so within the inst directory) or tar-balled. The problem is that it also finds the tutorial.Rmd files in the renv directories! So, we end up testing stuff twice, including stuff which might be old, if we have not re-installed the package locally after whatever changes we made. 
  

There may be other differences between running Test Package and Check Package, but I am not sure.

I think that, in order to simulate the test that is run with R CMD check, you need, from the R Console, to type:

rmarkdown::render("inst/tutorials/03-functions-A/tutorial.Rmd")

Note that R CMD check does not seem to catch cases in which you library() a package in a tutorial but that package is not in DESCRIPTION. But such a discrepancy will cause an error on Github Actions because, there, you only have access to packages that have been installed as part of that test.
