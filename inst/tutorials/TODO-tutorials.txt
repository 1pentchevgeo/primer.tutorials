TODO Items for Tutorials


Becca:

2) Feel free to edit tools appendix as you do this.

3) rstudioapi::readRStudioPreference(name = "load_workspace") to front of tools.

4) Visualization: fewer plots, only using geoms we use in the book (or at least focussing on them), always including some tidyverse commands, always build and save plot at the start.

________________________________

TO DO:

1. Add comments which appear after they press the run code button, providing a sentence or two (no more) of commentary.

2. Reorganize visualization-A so that it looks more like other tutorials, with clear groups, and then exercises.

3. Get rid of red "Ok"" box in answer to text questions.

4. Get rid of color red when replying to text questions.

5. Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

6. Fix ames nonsense. Best to replace it in the tutorial with a poli-sci example and then use that example in the chapter.

7. In tutorials like 10, we really want to force students to look at the objects. And yet, each time, we just have them assign it. Maybe we should just spit out? Or tell them to also print it? Or tell them to place () around the assignment so that a print out just appears?


__________________________________

Questions: Things to Look Into

1. One way to having quotes turned into curly quotes is to write `"nnet"` instead of "nnet". You never want curly quotes. Isn't there a better way to do this? If not, fix every use of quotation marks.

2. Can we get shortcut keys to work in tutorials, especialy CMD-shift-m?

3. Can question_text provide the user with more empty lines to fill?

4. Why are students are losing work?

5. Each tutorial should have a preliminaries section which reminds students of any tricks which are needed later, even if we have already seen those functions in earlier chapters.

6. Can we give students a search box in the tutorial so that they can find answers to questions they have already done?

7. There is a lot of redundent text in tutorials: Write your name, submit, et cetera. Any way to avoid copying/pasting that each time? Maybe we need a "make tutorial" script which would take a raw tutorial and then add that material to it.

8. Can we show "answers" to a Tutorial after students have submitted it? How? Maybe all we need is a script which pulls out the code for all the major examples and puts it in a single RMD which we could knit and distribute? If we had a standard scheme for naming the R code chunks in which these are created, pulling them out would be easy. Indeed, creating this file could be part of the test process!

9. How can we automate the testing of hints? Or maybe make all hints eval=FALSE? Maybe have our testing process check that all hints have eval=FALSE?


10. How test for exercise chunks with no lines, which causes a weird error?

__________________________________

Mysterious:

1. Each answer should always spit out something. Interactivity is good! Students should always look at what their code is spitting out. Perhaps the hint could always show the spit out also. That is how they know that their answer is correct! Only the last step puts an assignment operator at the top of the pipe.


Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why? Also: "I personally like to have individual data/ folders in each tutorial, as it makes making them a little easier to deploy." Interesting! Would be nice to make each tutorial more self-contained, perhaps.







